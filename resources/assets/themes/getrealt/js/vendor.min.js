!function(n){n.fn.parallax=function(t){var e=n(window).height(),o=n.extend({speed:.15},t);return this.each(function(){var t=n(this);if(t.initialY=0,t[0].style.backgroundPositionY){var i=parseInt(t[0].style.backgroundPositionY);t.initialY=i||0}n(document).scroll(function(){var i=n(window).scrollTop(),r=t.offset().top;if(!(r+t.outerHeight()<=i||r>=i+e)){var u=t.initialY-Math.round((r-i)*o.speed);t.css("background-position","center "+u+"px")}})})},n(document).ready(function(){n(".parallax-heading").parallax({speed:.35})})}(jQuery),function(n,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():n.polly=t()}(this,function(){"use strict";function n(n,t){for(var e=0;;)try{return t()}catch(t){if(!(e<n.count&&n.handleFn(t)))throw t;e++}}function t(n,t){var e=0;return new Promise(function(o,i){function r(){t().then(function(n){o(n)},function(t){e<n.count&&n.handleFn(t)?(e++,r()):i(t)})}r()})}function e(n,t){return new Promise(function(e,o){function i(){t().then(function(n){e(n)},function(t){var e=n.delays.shift();e&&n.handleFn(t)?setTimeout(i,e):o(t)})}i()})}function o(n,t,e){function o(r,u){r&&i<n.count&&n.handleFn(r)?(i++,t(o)):e(r,u)}var i=0;t(o)}function i(n,t,e){function o(i,r){var u=n.delays.shift();i&&u&&n.handleFn(i)?setTimeout(function(){t(o)},u):e(i,r)}t(o)}function r(n){for(var t=[],e=u.delay,o=0;o<n;o++)t.push(e),e*=2;return t}var u={delay:100},c=function(){var c={count:1,delays:[u.delay],handleFn:function(){return!0}};return{handle:function(n){return"function"==typeof n&&(c.handleFn=n),this},retry:function(e){return"number"==typeof e&&(c.count=e),{execute:n.bind(null,c),executeForPromise:t.bind(null,c),executeForNode:o.bind(null,c)}},waitAndRetry:function(n){return"number"==typeof n&&(n=r(n)),Array.isArray(n)&&(c.delays=n),{executeForPromise:e.bind(null,c),executeForNode:i.bind(null,c)}}}};return c.defaults=u,c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
